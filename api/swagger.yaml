---
swagger: "2.0"
info:
  description: "Server API to manage system operations and resources."
  version: "1.0.0"
  title: "API seu estoque"
  contact:
    email: "fagner.m.carvalho@gmail.com"
host: "virtserver.swaggerhub.com"
basePath: "/Fagner-Carvalho/seu-estoque-API/1.0.0"
tags:
- name: "user"
  description: "User operations"
- name: "category"
  description: "Category operations"
- name: "unitMeasure"
  description: "Unit measure operations"
- name: "supplier"
  description: "Supllier operations"
- name: "item"
  description: "Item operations"
- name: "inventoryMovements"
  description: "Inventory movements operations"
schemes:
- "https"
- "http"
paths:
  /user:
    get:
      tags:
      - "user"
      summary: "List all users"
      description: ""
      operationId: "ListUsers"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        minimum: 1
      - name: "limit"
        in: "query"
        description: "The numbers of items to return"
        required: false
        type: "integer"
        minimum: 1
      - name: "sort"
        in: "query"
        description: "The field to be ordered"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "The sorting type (ascending or descending)"
        required: false
        type: "string"
        enum:
        - "asc"
        - "desc"
      - name: "q"
        in: "query"
        description: "The text to filter user"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "user"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "User"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "failed operation"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updates a user with form data"
      description: "Returns a single user"
      operationId: "updateUserWithForm"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Deletes a user"
      description: ""
      operationId: "deleteUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "User not found"
      x-swagger-router-controller: "User"
  /category:
    get:
      tags:
      - "category"
      summary: "List all category"
      description: ""
      operationId: "ListCategory"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        minimum: 1
      - name: "limit"
        in: "query"
        description: "The numbers of items to return"
        required: false
        type: "integer"
        minimum: 1
      - name: "sort"
        in: "query"
        description: "The field to be ordered"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "The sorting type (ascending or descending)"
        required: false
        type: "string"
        enum:
        - "asc"
        - "desc"
      - name: "q"
        in: "query"
        description: "The text to filter category"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "Category"
    post:
      tags:
      - "category"
      summary: "Add a new category"
      description: ""
      operationId: "addCategory"
      parameters:
      - in: "body"
        name: "body"
        description: "Category object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Category"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "Category"
  /category/{categoryId}:
    get:
      tags:
      - "category"
      summary: "Find category by ID"
      description: "Returns a single category"
      operationId: "getCategoryById"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: "failed operation"
        "404":
          description: "Category not found"
      x-swagger-router-controller: "Category"
    put:
      tags:
      - "category"
      summary: "Updates a category with form data"
      description: "Returns a single category"
      operationId: "updateCategoryWithForm"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "Category not found"
      x-swagger-router-controller: "Category"
    delete:
      tags:
      - "category"
      summary: "Deletes a category"
      description: ""
      operationId: "deleteCategory"
      parameters:
      - name: "categoryId"
        in: "path"
        description: "ID of category that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "Category not found"
      x-swagger-router-controller: "Category"
  /unitMeasure:
    get:
      tags:
      - "unitMeasure"
      summary: "List all unitMeasure"
      description: ""
      operationId: "ListUnitMeasure"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        minimum: 1
      - name: "limit"
        in: "query"
        description: "The numbers of items to return"
        required: false
        type: "integer"
        minimum: 1
      - name: "sort"
        in: "query"
        description: "The field to be ordered"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "The sorting type (ascending or descending)"
        required: false
        type: "string"
        enum:
        - "asc"
        - "desc"
      - name: "q"
        in: "query"
        description: "The text to filter unitMeasure"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UnitMeasure"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "UnitMeasure"
    post:
      tags:
      - "unitMeasure"
      summary: "Add a new unitMeasure"
      description: ""
      operationId: "addUnitMeasure"
      parameters:
      - in: "body"
        name: "body"
        description: "UnitMeasure object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/UnitMeasure"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "UnitMeasure"
  /unitMeasure/{unitMeasureId}:
    get:
      tags:
      - "unitMeasure"
      summary: "Find unitMeasure by ID"
      description: "Returns a single unitMeasure"
      operationId: "getUnitMeasureById"
      parameters:
      - name: "unitMeasureId"
        in: "path"
        description: "ID of unitMeasure to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UnitMeasure"
        "400":
          description: "failed operation"
        "404":
          description: "UnitMeasure not found"
      x-swagger-router-controller: "UnitMeasure"
    put:
      tags:
      - "unitMeasure"
      summary: "Updates a unitMeasure with form data"
      description: "Returns a single unitMeasure"
      operationId: "updateUnitMeasureWithForm"
      parameters:
      - name: "unitMeasureId"
        in: "path"
        description: "ID of unitMeasure that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "UnitMeasure not found"
      x-swagger-router-controller: "UnitMeasure"
    delete:
      tags:
      - "unitMeasure"
      summary: "Deletes a unitMeasure"
      description: ""
      operationId: "deleteUnitMeasure"
      parameters:
      - name: "unitMeasureId"
        in: "path"
        description: "ID of unitMeasure that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "UnitMeasure not found"
      x-swagger-router-controller: "UnitMeasure"
  /supplier:
    get:
      tags:
      - "supplier"
      summary: "List all supplier"
      description: ""
      operationId: "ListSupplier"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        minimum: 1
      - name: "limit"
        in: "query"
        description: "The numbers of items to return"
        required: false
        type: "integer"
        minimum: 1
      - name: "sort"
        in: "query"
        description: "The field to be ordered"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "The sorting type (ascending or descending)"
        required: false
        type: "string"
        enum:
        - "asc"
        - "desc"
      - name: "q"
        in: "query"
        description: "The text to filter supplier"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Supplier"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "Supplier"
    post:
      tags:
      - "supplier"
      summary: "Add a new supplier"
      description: ""
      operationId: "addSupplier"
      parameters:
      - in: "body"
        name: "body"
        description: "Supplier object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Supplier"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "Supplier"
  /supplier/{supplierId}:
    get:
      tags:
      - "supplier"
      summary: "Find supplier by ID"
      description: "Returns a single supplier"
      operationId: "getSupplierById"
      parameters:
      - name: "supplierId"
        in: "path"
        description: "ID of supplier to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Supplier"
        "400":
          description: "failed operation"
        "404":
          description: "Supplier not found"
      x-swagger-router-controller: "Supplier"
    put:
      tags:
      - "supplier"
      summary: "Updates a supplier with form data"
      description: "Returns a single supplier"
      operationId: "updateSupplierWithForm"
      parameters:
      - name: "supplierId"
        in: "path"
        description: "ID of supplier that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "Supplier not found"
      x-swagger-router-controller: "Supplier"
    delete:
      tags:
      - "supplier"
      summary: "Deletes a supplier"
      description: ""
      operationId: "deleteSupplier"
      parameters:
      - name: "supplierId"
        in: "path"
        description: "ID of supplier that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "Supplier not found"
      x-swagger-router-controller: "Supplier"
  /item:
    get:
      tags:
      - "item"
      summary: "List all item"
      description: ""
      operationId: "ListItem"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        minimum: 1
      - name: "limit"
        in: "query"
        description: "The numbers of items to return"
        required: false
        type: "integer"
        minimum: 1
      - name: "sort"
        in: "query"
        description: "The field to be ordered"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "The sorting type (ascending or descending)"
        required: false
        type: "string"
        enum:
        - "asc"
        - "desc"
      - name: "q"
        in: "query"
        description: "The text to filter item"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Item"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "Item"
    post:
      tags:
      - "item"
      summary: "Add a new item"
      description: ""
      operationId: "addItem"
      parameters:
      - in: "body"
        name: "body"
        description: "Item object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "Item"
  /item/{itemId}:
    get:
      tags:
      - "item"
      summary: "Find item by ID"
      description: "Returns a single item"
      operationId: "getItemById"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Item"
        "400":
          description: "failed operation"
        "404":
          description: "Item not found"
      x-swagger-router-controller: "Item"
    put:
      tags:
      - "item"
      summary: "Updates a item with form data"
      description: "Returns a single item"
      operationId: "updateItemWithForm"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "Item not found"
      x-swagger-router-controller: "Item"
    delete:
      tags:
      - "item"
      summary: "Deletes a item"
      description: ""
      operationId: "deleteItem"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "Item not found"
      x-swagger-router-controller: "Item"
  /inventoryMovements:
    get:
      tags:
      - "inventoryMovements"
      summary: "List all inventoryMovements"
      description: ""
      operationId: "ListInventoryMovements"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number"
        required: false
        type: "integer"
        minimum: 1
      - name: "limit"
        in: "query"
        description: "The numbers of items to return"
        required: false
        type: "integer"
        minimum: 1
      - name: "sort"
        in: "query"
        description: "The field to be ordered"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "The sorting type (ascending or descending)"
        required: false
        type: "string"
        enum:
        - "asc"
        - "desc"
      - name: "q"
        in: "query"
        description: "The text to filter inventoryMovements"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/InventoryMovements"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "InventoryMovements"
    post:
      tags:
      - "inventoryMovements"
      summary: "Add a new inventoryMovements"
      description: ""
      operationId: "addInventoryMovements"
      parameters:
      - in: "body"
        name: "body"
        description: "InventoryMovements object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/InventoryMovements"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
      x-swagger-router-controller: "InventoryMovements"
  /inventoryMovements/{inventoryMovementId}:
    get:
      tags:
      - "inventoryMovements"
      summary: "Find inventoryMovements by ID"
      description: "Returns a single inventoryMovements"
      operationId: "getInventoryMovementsById"
      parameters:
      - name: "inventoryMovementId"
        in: "path"
        description: "ID of inventoryMovements to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/InventoryMovements"
        "400":
          description: "failed operation"
        "404":
          description: "InventoryMovements not found"
      x-swagger-router-controller: "InventoryMovements"
    delete:
      tags:
      - "inventoryMovements"
      summary: "Deletes a inventoryMovements"
      description: ""
      operationId: "deleteInventoryMovements"
      parameters:
      - name: "inventoryMovementId"
        in: "path"
        description: "ID of inventoryMovements that needs to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "failed operation"
        "404":
          description: "InventoryMovements not found"
      x-swagger-router-controller: "InventoryMovements"
definitions:
  User:
    type: "object"
    required:
    - "email"
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      status:
        type: "boolean"
        description: "User Status"
        default: true
      createdAt:
        type: "string"
        format: "datetime"
      updatedAt:
        type: "string"
        format: "datetime"
      deletedAt:
        type: "string"
        format: "datetime"
    example:
      createdAt: "createdAt"
      password: "password"
      deletedAt: "deletedAt"
      phone: "phone"
      name: "name"
      id: "id"
      email: "email"
      status: true
      updatedAt: "updatedAt"
  Item:
    type: "object"
    required:
    - "categoryId"
    - "name"
    - "unitMeasureId"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      categoryId:
        type: "string"
      unitMeasureId:
        type: "string"
      minimumInventory:
        type: "integer"
        format: "int64"
      status:
        type: "boolean"
        description: "User Status"
        default: true
      createdAt:
        type: "string"
        format: "datetime"
      updatedAt:
        type: "string"
        format: "datetime"
      deletedAt:
        type: "string"
        format: "datetime"
    example:
      createdAt: "createdAt"
      unitMeasureId: "unitMeasureId"
      deletedAt: "deletedAt"
      name: "name"
      minimumInventory: 0
      id: "id"
      categoryId: "categoryId"
      status: true
      updatedAt: "updatedAt"
  Category:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      createdAt:
        type: "string"
        format: "datetime"
      updatedAt:
        type: "string"
        format: "datetime"
      deletedAt:
        type: "string"
        format: "datetime"
    example:
      createdAt: "createdAt"
      deletedAt: "deletedAt"
      name: "name"
      description: "description"
      id: "id"
      updatedAt: "updatedAt"
  Supplier:
    type: "object"
    required:
    - "cnpj"
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      cnpj:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      createdAt:
        type: "string"
        format: "datetime"
      updatedAt:
        type: "string"
        format: "datetime"
      deletedAt:
        type: "string"
        format: "datetime"
    example:
      createdAt: "createdAt"
      deletedAt: "deletedAt"
      phone: "phone"
      name: "name"
      id: "id"
      cnpj: "cnpj"
      email: "email"
      updatedAt: "updatedAt"
  UnitMeasure:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      abbreviation:
        type: "string"
      createdAt:
        type: "string"
        format: "datetime"
      updatedAt:
        type: "string"
        format: "datetime"
      deletedAt:
        type: "string"
        format: "datetime"
    example:
      createdAt: "createdAt"
      deletedAt: "deletedAt"
      name: "name"
      id: "id"
      abbreviation: "abbreviation"
      updatedAt: "updatedAt"
  InventoryMovements:
    type: "object"
    properties:
      id:
        type: "string"
      ItemId:
        type: "string"
      supplierId:
        type: "string"
      typeMovement:
        type: "string"
      quantity:
        type: "number"
      unitPrice:
        type: "number"
      totalPrice:
        type: "number"
      createdAt:
        type: "string"
        format: "datetime"
      updatedAt:
        type: "string"
        format: "datetime"
      deletedAt:
        type: "string"
        format: "datetime"
    example:
      unitPrice: 6.02745618307040320615897144307382404804229736328125
      createdAt: "createdAt"
      deletedAt: "deletedAt"
      supplierId: "supplierId"
      quantity: 0.80082819046101150206595775671303272247314453125
      totalPrice: 1.46581298050294517310021547018550336360931396484375
      id: "id"
      typeMovement: "typeMovement"
      ItemId: "ItemId"
      updatedAt: "updatedAt"
  Permission:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      menuId:
        type: "string"
      access:
        type: "boolean"
        default: false
      createdAt:
        type: "string"
        format: "datetime"
      updatedAt:
        type: "string"
        format: "datetime"
      deletedAt:
        type: "string"
        format: "datetime"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
